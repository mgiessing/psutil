# Executed on every push by GitHub Actions. This runs CI tests and
# generates wheels (not all) on the following platforms:
#
# * Linux
# * macOS
# * Windows (disabled)
# * FreeBSD
#
# To skip certain builds see:
# https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip
#
# External GH actions:
# * https://github.com/pypa/cibuildwheel
# * https://github.com/actions/checkout
# * https://github.com/actions/setup-python
# * https://github.com/actions/upload-artifact
# * https://github.com/marketplace/actions/cancel-workflow-action
# * https://github.com/vmactions/freebsd-vm

on: [push, pull_request]
name: build
jobs:
  # Linux + macOS + Windows Python 3
  py3:
    name: py3-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-12, windows-2019]
        # python: ["3.6", "3.11"]

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v2
      with:
        platforms: all

    - name: Create wheels + run tests
      uses: pypa/cibuildwheel@v2.11.2
      env:
        # configure cibuildwheel to build native archs ('auto'), and some
        # emulated ones
        CIBW_ARCHS_LINUX: auto aarch64 ppc64le
        
    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: wheelhouse

    - name: Generate .tar.gz
      if: matrix.os == 'ubuntu-latest'
      run: |
        make generate-manifest
        python setup.py sdist
        mv dist/psutil*.tar.gz wheelhouse/

  # Windows cp37+ tests
  # psutil tests do not like running from a virtualenv with python>=3.7 so
  # not using cibuildwheel for those. run them "manually" with this job.
  py3-windows-tests:
    name: py3-windows-test-${{ matrix.python }}-${{ matrix.architecture }}
    needs: py3
    runs-on: windows-2019
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        architecture: ["x86", "x64"]

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: "${{ matrix.python }}"
        architecture: "${{ matrix.architecture }}"

    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheels
        path: wheelhouse

    - name: Run tests
      run: |
        mkdir .tests
        cd .tests
        pip install $(find ../wheelhouse -name '*-cp36-abi3-${{ matrix.architecture == 'x86' && 'win32' || 'win_amd64'}}.whl')[test]
        export PYTHONWARNINGS=always
        export PYTHONUNBUFFERED=1
        export PSUTIL_DEBUG=1
        python ../psutil/tests/runner.py
        python ../psutil/tests/test_memleaks.py
      shell: bash

  # Linux + macOS + Python 2
  py2:
    name: py2-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-12]
    env:
      CIBW_TEST_COMMAND:
        PYTHONWARNINGS=always PYTHONUNBUFFERED=1 PSUTIL_DEBUG=1 python {project}/psutil/tests/runner.py &&
        PYTHONWARNINGS=always PYTHONUNBUFFERED=1 PSUTIL_DEBUG=1 python {project}/psutil/tests/test_memleaks.py
      CIBW_TEST_EXTRAS: test
      CIBW_BUILD: 'cp27-*'

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Create wheels + run tests
      uses: pypa/cibuildwheel@v1.12.0

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: wheelhouse

    - name: Generate .tar.gz
      if: matrix.os == 'ubuntu-latest'
      run: |
        make generate-manifest
        python setup.py sdist
        mv dist/psutil*.tar.gz wheelhouse/

  # FreeBSD (tests only)
  py3-freebsd:
    runs-on: macos-12
    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - uses: actions/checkout@v3

    - name: Run tests
      id: test
      uses: vmactions/freebsd-vm@v0
      with:
        usesh: true
        prepare: pkg install -y gcc python3
        run: |
          set +e
          export \
            PYTHONUNBUFFERED=1 \
            PYTHONWARNINGS=always \
            PSUTIL_DEBUG=1
          python3 -m pip install --user setuptools
          python3 setup.py install
          python3 psutil/tests/runner.py
          python3 psutil/tests/test_memleaks.py

  # Run linters
  linters:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
    - name: 'Run linters'
      run: |
        # py3
        python3 -m pip install flake8 isort
        python3 -m flake8 .
        python3 -m isort .
        # clinter
        find . -type f \( -iname "*.c" -o -iname "*.h" \) | xargs python3 scripts/internal/clinter.py

  # Check sanity of .tar.gz + wheel files
  check-dist:
    needs: [py2, py3]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheelhouse
      - run: |
          python scripts/internal/print_hashes.py wheelhouse/
          pipx run twine check --strict wheelhouse/*
